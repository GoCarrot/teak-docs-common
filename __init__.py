import os

rtd_base_url = 'https://teak.readthedocs.io/'

# This is used for linking and such so we link to the thing we're building
rtd_version = os.environ.get('READTHEDOCS_VERSION', 'latest')
if rtd_version not in ['stable', 'latest']:
    rtd_version = 'latest'

projects = [
  {'name': 'teak', 'local': 'http://localhost:8000/', 'remote': rtd_base_url + 'en/%s/' % rtd_version},
  {'name': 'unity', 'local': 'http://localhost:8003/', 'remote': rtd_base_url + 'projects/unity/en/%s/' % rtd_version},
  {'name': 'air', 'local': 'http://localhost:8002/', 'remote': rtd_base_url + 'projects/air/en/%s/' % rtd_version},
  {'name': 'server', 'local': 'http://localhost:8001/', 'remote': rtd_base_url + 'projects/server-api/en/%s/' % rtd_version}
]

def intersphinx_mapping(config):
  lookup_key = 'remote' if config['read_the_docs_build'] else 'local'
  return {entry['name']:(entry[lookup_key], None) for entry in projects}

def generate_sidebar(config, this_project, file):
  lookup_key = 'remote' if config['read_the_docs_build'] else 'local'
  project_dict = {entry['name']:entry[lookup_key] for entry in projects}

  sidebars = [
    {
      'caption': 'User Guides',
      'entries': [
        {'project': 'teak', 'title': 'Getting Started', 'page': 'getting_started'},
        {'project': 'teak', 'title': 'Tips and Tricks', 'page': 'tips_and_tricks'},
        {'project': 'teak', 'title': 'Reference', 'page': 'reference'}
      ]
    },
    {
      'caption': 'Developer Guides',
      'entries': [
        {'project': 'unity', 'title': 'Unity SDK', 'page': 'integration'},
        {'project': 'air', 'title': 'Adobe AIR SDK', 'page': 'integration'},
        {'project': 'server', 'title': 'Server API', 'page': 'integration'}
      ]
    }
  ]

  lines = ['', '.. DO NOT MODIFY! THIS PAGE IS AUTOGENERATED!', '']

  for sidebar in sidebars:
    lines.extend([".. toctree::", f"    :caption: {sidebar['caption']}", "    :hidden:", "    :maxdepth: 2", ""])
    for entry in sidebar['entries']:
      if entry['project'] == this_project:
        page = entry['page']
        page = 'self' if page == 'index' else page
        args = entry['title'], page
      else:
        args = (entry['title'], f"{project_dict[entry['project']]}{entry['page']}.html")
      lines.append("    %s <%s>" % args)
    lines.append('')

  contents = "\n".join(lines)

  try:
    with open(file, 'r') as f:
      old_contents = f.read()
  except:
    old_contents = ''

  if contents != old_contents:
    with open(file, 'w') as f:
      f.write(contents)
